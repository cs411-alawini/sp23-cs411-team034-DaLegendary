"use strict";
var inherits = require('util').inherits;
var Resolvable = require('./resolvable');


var Arr = function () {
	Resolvable.call(this);

	this.start = undefined;
	this.end = undefined;

	this.isSingle = false;
	this.isCmdArgs = false;
};
inherits(Arr, Resolvable);

Arr.prototype.resolve = function (runner, ctx) {
	var src = this.getSrc(runner, ctx);
	var sliced = (this.isSingle ? src[this.start] : src.slice(this.start, this.end));
	if (this.isCmdArgs) {
		return runner.toCmdArgs(sliced);
	}
	else {
		return sliced;
	}
};

Object.defineProperties(Arr.prototype, {
	cmdArgs: {
		get: function () {
			var result = this.ensureNotOrigin();
			result.isCmdArgs = true;
			return result;
		}
	}
});

Arr.prototype.get = function (pos) {
	if (this.isSingle) {
		throw new Error('Cannot apply get() to single value');
	}
	var result = this.slice(pos, pos + 1);
	result.isSingle = true;
	return result;
};

Arr.prototype.slice = function (start, end) {
	if (this.isSingle) {
		throw new Error('Cannot apply slice() to single value');
	}
	if (this.start != null) {
		start += this.start;
		end += this.start;
	}
	if (this.end != null && this.end < end) {
		end = this.end;
	}
	var result = this.ensureNotOrigin();
	result.start = start;
	result.end = end;
	return result;
};


module.exports = Arr;
