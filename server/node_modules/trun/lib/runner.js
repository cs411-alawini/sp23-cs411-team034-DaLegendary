"use strict";
var domain = require('domain');
var spawn = require('child_process').spawn;
var Resolvable = require('./resolvable/core/resolvable');
var WrappedTask = require('./wrapped/core/wrapped_task');
var Arr = require('./wrapped/arr');
var RunTask = require('./wrapped/run_task');
var Exit = require('./errors').Exit;

var alias = RunTask.alias;
var call = RunTask.call;


var Runner = function () {
	this.taskName = null;
	this.args = null;
	this.tasks = {};
};

Runner.prototype.addTasks = function (tasks) {
	for (var k in tasks) {
		var f = this.createTaskFunc(tasks[k], true);
		if (f != null) {
			this.tasks[k] = f;
		}
	}
};

Runner.prototype.start = function () {
	var task = process.argv[2];
	if (task == null || task == '-') {
		task = 'default';
	}
	var args = process.argv.slice(3);

	this.taskName = task;
	this.args = args;

	var done = this.onDone.bind(this);
	var d = domain.create();
	d.on('error', done);
	var self = this;
	d.run(function() {
		self.runTaskFunc(self.createTaskFunc(task, true), args.slice(), done);
	});
};

Runner.prototype.onDone = function (err) {
	if (err != null) {
		var exitCode = 0;
		if (err instanceof Exit) {
			exitCode = err.code;
		}
		else {
			if (err.stack) {
				console.log(err.stack);
			}
			else {
				console.log(err);
			}
			if (err.exitCode != null && err.exitCode !== 0) {
				exitCode = err.exitCode;
			}
		}
		process.exit(exitCode);
	}
};

Runner.prototype.runTasks = function (tasks, args, cb) {
	this.runTaskFunc(this.createTaskFunc(tasks), args, cb);
};

Runner.prototype.runTaskFunc = function (task, args, cb) {
	var arity = task.length;
	if (arity === 0) { // var args
		args.push(cb);
	}
	else { // assuming last arg is cb
		args[arity - 1] = cb;
	}
	task.apply(null, args);
};

Runner.prototype.getArgs = function (args) {
	if (args != null && args.length > 0) {
		return Array.prototype.slice.call(args, 0, args.length - 1);
	}
	return [];
};

Runner.prototype.getCb = function (args) {
	if (args == null) {
		return null;
	}
	return args[args.length - 1];
};

Runner.prototype.toWrappedTask = function (task, isTopLevel) {
	if (Array.isArray(task)) {
		return new Arr(task);
	}
	else if (task.constructor === String) {
		if (isTopLevel) {
			return alias(task);
		}
		else {
			return call(task);
		}
	}
	else if (task instanceof WrappedTask) {
		return task;
	}
	return null;
};

Runner.prototype.createTaskFunc = function (task, isTopLevel) {
	if (task.constructor === Function) {
		return task.bind(this);
	}
	else {
		task = this.toWrappedTask(task, isTopLevel);
		if (task != null) {
			return task.createTaskFunc(this);
		}
	}
	throw new Error('Not a task: ' + task);
};

Runner.prototype.subst = function (args, ctx) {
	if (args instanceof Resolvable) {
		return args.resolve(this, ctx);
	}
	else {
		var result = [];
		for (var i = 0; i < args.length; i++) {
			var item = args[i];
			if (item instanceof Resolvable) {
				result.push(item.resolve(this, ctx));
			}
			else {
				result.push(item);
			}
		}
		return result;
	}
};

Runner.prototype.run = function () {
	var args = this.getArgs(arguments);
	var cb = this.getCb(arguments);
	var cmd = this.createCmd(args);
	this.runCmd(cmd, false, cb);
};

Runner.prototype.prun = function () {
	var args = this.getArgs(arguments);
	var cb = this.getCb(arguments);
	var cmd = this.createCmd(args);
	this.print(cmd);
	this.runCmd(cmd, false, cb);
};

Runner.prototype.tryRun = function () {
	var args = this.getArgs(arguments);
	var cb = this.getCb(arguments);
	var cmd = this.createCmd(args);
	this.runCmd(cmd, true, cb);
};

Runner.prototype.tryPrun = function () {
	var args = this.getArgs(arguments);
	var cb = this.getCb(arguments);
	var cmd = this.createCmd(args);
	this.print(cmd);
	this.runCmd(cmd, true, cb);
};

Runner.prototype.runCmd = function (cmd, doTry, cb) {
	var ps = spawn('/bin/sh', ['-c', cmd], { stdio: 'inherit' });
	ps.on('close', function (code) {
		var err = null;
		if (code !== 0 && !doTry) {
			err = new Error('Command exited with code ' + code);
			err.exitCode = code;
		}
		cb(err, code);
	});
};

Runner.prototype.createCmd = function (parts, ctx) {
	return this.joinStr(parts, ctx);
};

Runner.prototype.toCmdArgs = function (args) {
	if (!Array.isArray(args)) {
		return this.toCmdArg(args);
	}
	var result = [];
	for (var i = 0; i < args.length; i++) {
		var arg = args[i];
		if (arg != null) {
			result.push(this.toCmdArg(arg));
		}
	}
	return result.join(' ');
};


Runner.prototype.toCmdArg = function (arg) {
	if (!arg) {
		return '""';
	}
	else {
		arg = ('' + arg).replace('\\', '\\\\');
		if (/[\s\"]/.test(arg)) {
			arg = arg
				.replace('\t', '\\t')
				.replace('\n', '\\n')
				.replace('"', '\\"');
			return '"' + arg + '"';
		}
		else {
			return arg;
		}
	}
};

Runner.prototype.joinStr = function (parts, ctx) {
	if (parts == null) {
		return '';
	}
	else if (parts.constructor === String) {
		return parts;
	}
	else if (Array.isArray(parts)) {
		var arr = [];
		for (var i = 0; i < parts.length; i++) {
			arr.push(this.joinStr(parts[i], ctx));
		}
		return arr.join('');
	}
	else if (parts instanceof Resolvable) {
		return this.joinStr(parts.resolve(this, ctx), ctx);
	}
	return '' + parts;
};

Runner.prototype.print = function () {
	var s = this.joinStr(Array.prototype.slice.call(arguments));
	this.printStr(s);
};

Runner.prototype.printStr = function (s) {
	console.log(s);
};

Runner.prototype.printCmd = function (cmd) {
	console.log(cmd);
};

Runner.prototype.exit = function (cb, opt_code) {
	var code = opt_code || 0;
	cb(new Exit(code));
};


module.exports = Runner;
