"use strict";
var trun = require('../lib');
var w = trun.wrapped;
var r = trun.resolvable;

var runner = new trun.Runner();
runner.addTasks({
	default:
		'test', // alias, args will be applied

	test: [
		w.apply('argv', r.args),
		'wrapped',
		'resolvable',
		'func',
		'direct'
	],

	argv: [
		w.print('--> argv: argv = a b a\\tb "a b"'),
		w.print('argv = ', r.args.cmdArgs)
	],

	wrapped: [
		w.print('-> wrapped'),
		'toBox',
		'print',
		'result',
		'run',
		'runTask',
	],

	resolvable: [
		w.print('-> resolvable'),
		'args',
		'box',
		'custom',
		'prev'
	],

	func: [
		w.print('-> func'),
		'_func',
		w.call('vararg', 1, 2, 3)
	],

	direct:
		w.print('-> direct <-'),

	// wrapped

	toBox: [
		w.print('--> toBox: x = 5'),
		w.toBox('x', '5'),
		w.print('x = ', r.box.get('x'))
	],

	print: [
		w.print('--> print: print test'),
		w.print('print', [' ', null], 'test')
	],

	result: [
		w.print('--> result: result 7'),
		w.result(7),
		w.print('result ', r.prev.get(0))
	],

	run: [
		w.print('--> run'),
		'_run',
		'prun',
		'tryRun',
		'tryPrun'
	],

		_run: [
			w.print('---> run: run test'),
			w.run('echo', [' ', null], 'run', ' test')
		],

		prun: [
			w.print('---> prun: echo prun test\\nprun test'),
			w.prun('echo', [' ', null], 'prun', ' test')
		],

		tryRun: [
			w.print('---> tryRun: tryRun test'),
			w.tryRun('echo', [' ', null], 'tryRun', ' test', ' || false')
		],

		tryPrun: [
			w.print('---> tryPrun: echo tryPrun test || false\\ntryPrun test'),
			w.tryPrun('echo', [' ', null], 'tryPrun', ' test', ' || false')
		],

	runTask: [
		w.print('--> runTask'),
		'call',
		'apply'
	],

		runTaskTarget:
			w.print('target ', r.args),

		call: [
			w.print('---> call: target call 123'),
			w.call('runTaskTarget', 'call ', 1, 2, 3)
		],

		apply: [
			w.print('---> apply: target apply abc'),
			w.apply('runTaskTarget', ['apply ', 'a', 'b', 'c'])
		],

	// resolvable

	args: [
		w.print('--> args'),
		w.call('_args', 1, 2, 3),
		w.call('args_slice', 1, 2, 3),
		w.call('args_get', 1, 2, 3),
		w.call('args_cmdArgs', 1, 2, 3),
		w.call('args_slice_cmdArgs', 1, 2, 3),
		w.call('args_get_cmdArgs', 1, 2, 'a b')
	],

		_args: [
			w.print('---> args: args = 123'),
			w.print('args = ', r.args)
		],

		args_slice: [
			w.print('---> args.slice: slice = 23'),
			w.print('slice = ', r.args.slice(1, 3))
		],

		args_get: [
			w.print('---> args.get: get = 2'),
			w.print('get = ', r.args.get(1))
		],

		args_cmdArgs: [
			w.print('---> args.cmdArgs: cmdArgs = 1 2 3'),
			w.print('cmdArgs = ', r.args.cmdArgs)
		],

		args_slice_cmdArgs: [
			w.print('---> args.slice().cmdArgs: slice_cmdArgs = 1 2'),
			w.print('slice_cmdArgs = ', r.args.slice(0, 2).cmdArgs)
		],

		args_get_cmdArgs: [
			w.print('---> args.get().cmdArgs: get_cmdArgs = "a b"'),
			w.print('get_cmdArgs = ', r.args.get(2).cmdArgs)
		],

	box: [
		w.print('--> box'),
		'_box',
		'box_get',
		'box_get_cmdArgs'
	],

		_box: [
			w.print('---> box: box = 5, 6'),
			w.toBox('x', '5'),
			w.toBox('y', '6'),
			w.print('box = ', r.custom(function (runner, ctx) {
				return [ctx.box.x, ctx.box.y].join(', ');
			}))
		],

		box_get: [
			w.print('---> box.get: x = 5'),
			w.toBox('x', '5'),
			w.print('x = ', r.box.get('x'))
		],

		box_get_cmdArgs: [
			w.print('---> box.get.cmdArgs: x = 5 6'),
			w.toBox('x', ['5', '6']),
			w.print('x = ', r.box.get('x').cmdArgs)
		],

	custom: [
		w.print('--> custom: custom = hello'),
		w.print('custom = ', r.custom(function (runner, ctx) {
			return 'hello';
		}))
	],

	prev: [
		w.print('--> prev'),
		'_prev',
		'prev_slice',
		'prev_get',
		'prev_cmdArgs',
		'prev_slice_cmdArgs',
		'prev_get_cmdArgs',
	],

		_prev: [
			w.print('---> prev: prev = 123'),
			w.result(1, 2, 3),
			w.print('prev = ', r.prev)
		],

		prev_slice: [
			w.print('---> prev.slice: slice = 23'),
			w.result(1, 2, 3),
			w.print('slice = ', r.prev.slice(1, 3))
		],

		prev_get: [
			w.print('---> prev.get: get = 2'),
			w.result(1, 2, 3),
			w.print('get = ', r.prev.get(1))
		],

		prev_cmdArgs: [
			w.print('---> prev.cmdArgs: cmdArgs = 1 2 3'),
			w.result(1, 2, 3),
			w.print('cmdArgs = ', r.prev.cmdArgs)
		],

		prev_slice_cmdArgs: [
			w.print('---> prev.slice().cmdArgs: slice_cmdArgs = 1 2'),
			w.result(1, 2, 3),
			w.print('slice_cmdArgs = ', r.prev.slice(0, 2).cmdArgs)
		],

		prev_get_cmdArgs: [
			w.print('---> prev.get().cmdArgs: get_cmdArgs = "a b"'),
			w.result(1, 2, 'a b'),
			w.print('get_cmdArgs = ', r.prev.get(2).cmdArgs)
		],

	// func

	_func: [
		w.print('--> func'),
		w.call('__func', 1, 2, 3),
		'func_box',
		'func_print',
		'func_result',
		'func_run',
		'func_prun',
		'func_tryRun',
		'func_tryPrun',
		'func_call',
		'func_apply',
		'func_runTasks',
		'funcWithin',
		'func_cmdArgs'
	],

		__func: function (a, b, c, cb) {
			this.print('---> func: args = 123');
			this.print('args = ', a, b, c);
			cb();
		},

		func_box: [
			function (cb) {
				this.print('---> func box: x = 5');
				cb.ctx.box.x = 5;
				cb();
			},
			w.print('x = ', r.box.get('x'))
		],

		func_print: function (cb) {
			this.print('---> func print <-');
			cb();
		},

		func_result: [
			function (cb) {
				this.print('---> func result: prev = 123');
				cb(null, 1, 2, 3);
			},
			w.print('prev = ', r.prev)
		],

		func_run: function (cb) {
			this.print('---> func run: run 123');
			this.run('echo run ', 1, 2, 3, cb);
		},

		func_prun: function (cb) {
			this.print('---> func prun: echo prun 123\\nprun 123');
			this.prun('echo prun ', 1, 2, 3, cb);
		},

		func_tryRun: function (cb) {
			this.print('---> func tryRun: tryRun 123');
			this.tryRun('echo tryRun ', 1, 2, 3, ' || false', cb);
		},

		func_tryPrun: function (cb) {
			this.print('---> func tryPrun: echo tryPrun 123 || false\\ntryPrun 123');
			this.tryPrun('echo tryPrun ', 1, 2, 3, ' || false', cb);
		},

		funcTarget:
			w.print('target ', r.args),

		func_call: function (cb) {
			this.print('---> func call: target 123');
			this.tasks.funcTarget(1, 2, 3, cb);
		},

		func_apply: function (cb) {
			this.print('---> func apply: target 123');
			this.tasks.funcTarget.apply(null, [1, 2, 3, cb]);
		},

		func_runTasks: function (cb) {
			this.print('---> func runTasks: runTasks 123');
			this.runTasks([
				w.print('runTasks ', r.args)
			], [1, 2, 3], cb);
		},

		funcWithin: [
			w.print('--> funcWithin: funcWithin'),
			function (cb) {
				this.print('funcWithin');
				cb();
			}
		],

		func_cmdArgs: function (cb) {
			this.print('---> func cmdArgs: args = 1 2 3');
			this.print('args = ', this.toCmdArgs([1, 2, 3]));
			cb();
		},

	vararg: function () {
		this.print('--> vararg: args = 123');
		var args = this.getArgs(arguments);
		var cb = this.getCb(arguments);
		this.print(args);
		cb();
	}
});
runner.start();
