--> argv: argv = a b a\tb "a b"
argv = a b a\\tb "a b"
-> wrapped
--> toBox: x = 5
x = 5
--> print: print test
print test
--> result: result 7
result 7
--> run
---> run: run test
run test
---> prun: echo prun test\nprun test
echo prun test
prun test
---> tryRun: tryRun test
tryRun test
---> tryPrun: echo tryPrun test || false\ntryPrun test
echo tryPrun test || false
tryPrun test
--> runTask
---> call: target call 123
target call 123
---> apply: target apply abc
target apply abc
-> resolvable
--> args
---> args: args = 123
args = 123
---> args.slice: slice = 23
slice = 23
---> args.get: get = 2
get = 2
---> args.cmdArgs: cmdArgs = 1 2 3
cmdArgs = 1 2 3
---> args.slice().cmdArgs: slice_cmdArgs = 1 2
slice_cmdArgs = 1 2
---> args.get().cmdArgs: get_cmdArgs = "a b"
get_cmdArgs = "a b"
--> box
---> box: box = 5, 6
box = 5, 6
---> box.get: x = 5
x = 5
---> box.get.cmdArgs: x = 5 6
x = 5 6
--> custom: custom = hello
custom = hello
--> prev
---> prev: prev = 123
prev = 123
---> prev.slice: slice = 23
slice = 23
---> prev.get: get = 2
get = 2
---> prev.cmdArgs: cmdArgs = 1 2 3
cmdArgs = 1 2 3
---> prev.slice().cmdArgs: slice_cmdArgs = 1 2
slice_cmdArgs = 1 2
---> prev.get().cmdArgs: get_cmdArgs = "a b"
get_cmdArgs = "a b"
-> func
--> func
---> func: args = 123
args = 123
---> func box: x = 5
x = 5
---> func print <-
---> func result: prev = 123
prev = 123
---> func run: run 123
run 123
---> func prun: echo prun 123\nprun 123
echo prun 123
prun 123
---> func tryRun: tryRun 123
tryRun 123
---> func tryPrun: echo tryPrun 123 || false\ntryPrun 123
echo tryPrun 123 || false
tryPrun 123
---> func call: target 123
target 123
---> func apply: target 123
target 123
---> func runTasks: runTasks 123
runTasks 123
--> funcWithin: funcWithin
funcWithin
---> func cmdArgs: args = 1 2 3
args = 1 2 3
--> vararg: args = 123
123
-> direct <-
